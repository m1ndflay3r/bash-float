#!/usr/bin/env bash

floattoint() {
  IFS=$'.'
  aPOINT="$@"
  COUNT="0"
  unset dINT
  unset zDECL
  unset INT0
  unset INT1
  for i in $aPOINT; do
    zDECL="INT$COUNT"
    export $zDECL="$i"
    COUNT=$((COUNT + 1))
  done
  unset IFS
  if [ -z "$INT1" ]; then
    INT1="0"
  fi
  if [ -z "INT0" ] || [ "$INT0" == "-0" ]; then
    INT0="00"
    NEGZERO="1"
  else
    NEGZERO="0"
  fi
  while read -n1 character; do
    dPOINT=$((dPOINT + 1))
  done < <(echo -n "$INT0")
  export dPOINT="$dPOINT"
  export dINT="$INT0$INT1"
  if [[ -z "$INT0" ]]; then
    INT0="00"
  fi
  if [ $NEGZERO == 1 ] || [ $INT0 -lt 0 ]; then
    ISNEG="1"
  else
    ISNEG="0"
  fi
}

remzeros() {
  DEZERO="$@"
  unset RETURN
  unset DEZEROLENGTH
  while read -n1 character; do
    DEZEROLENGTH=$((DEZEROLENGTH + 1))
  done < <(echo -n $DEZERO)
  reverse() {
    unset REVERSE
    i=$((DEZEROLENGTH - 1))
    while [ $i -ge 0 ]; do
      REVERSE="$REVERSE${DEZERO:$i:1}"
      i=$((i - 1))
    done
    DEZERO="$REVERSE"
  }
  reverse
  DEZERO=$((10#$DEZERO))
  reverse
  RETURN="$DEZERO"
}

gth() {
  floattoint $1
  if [ $ISNEG == 1 ]; then
    FIRCOMPNEG="1"
    jFIRCOMP="${INT0:1}"
  else
    FIRCOMPNEG="0"
    jFIRCOMP="$INT0"
  fi
  kFIRCOMP="$INT1"
  floattoint $2
  if [ $ISNEG == 1 ]; then
    SECCOMPNEG="1"
    jSECCOMP="${INT0:1}"
  else
    SECCOMPNEG="0"
    jSECCOMP="$INT0"
  fi
  kFIRCOMPLEN="0"
  kSECCOMPLEN="0"
  kSECCOMP="$INT1"
  while read -n1 character; do
    kFIRCOMPLEN=$((kFIRCOMPLEN + 1))
  done < <(echo -n $kFIRCOMP)
  while read -n1 character; do
    kSECCOMPLEN=$((kSECCOMPLEN + 1))
  done < <(echo -n $kSECCOMP)
  if [[ $kFIRCOMPLEN -gt $kSECCOMPLEN ]]; then
    until [[ $kFIRCOMPLEN -eq $kSECCOMPLEN ]]; do
      kSECCOMP=""$kSECCOMP"0"
      kSECCOMPLEN=$((kSECCOMPLEN + 1))
    done
  fi
  if [[ $kFIRCOMPLEN -lt $kSECCOMPLEN ]]; then
    until [[ $kFIRCOMPLEN -eq $kSECCOMPLEN ]]; do
      kFIRCOMP=""$kFIRCOMP"0"
      kFIRCOMPLEN=$((kFIRCOMPLEN + 1))
    done
  fi
  if [ $FIRCOMPNEG == 1 ] && [ $SECCOMPNEG == 0 ]; then
    return 1
  elif [ $FIRCOMPNEG == 0 ] && [ $SECCOMPNEG == 1 ]; then
    return 0
  fi
  if [ $FIRCOMPNEG == 0 ] && [ $SECCOMPNEG == 0 ]; then
    if [[ "1"$jFIRCOMP$kFIRCOMP"" -gt "1"$jSECCOMP$kSECCOMP"" ]]; then
      return 0
    elif [[ "1"$jFIRCOMP$kFIRCOMP"" -lt "1"$jSECCOMP$kSECCOMP"" ]]; then
      return 1
    else
      return 2
    fi
  fi
  if [ $FIRCOMPNEG == 1 ] && [ $SECCOMPNEG == 1 ]; then
    if [[ "1"$jFIRCOMP$kFIRCOMP"" -gt "1"$jSECCOMP$kSECCOMP"" ]]; then
      return 1
    elif [[ "1"$jFIRCOMP$kFIRCOMP"" -lt "1"$jSECCOMP$kSECCOMP"" ]]; then
      return 0
    else
      return 2
    fi
  fi
}

lth() {
  if gth "$1" "$2"; then
    return 1
  else
    gth "$1" "$2"
    if [ $? -eq 1 ]; then
      return 0
    fi
  fi
}

eql() {
  gth "$1" "$2"
  if [ $? -eq 2 ]; then
    return 0
  else
    return 1
  fi
}

geq() {
  if gth "$1" "$2" || eql "$1" "$2"; then
    return 0
  else
    return 1
  fi
}

leq() {
  if lth "$1" "$2" || eql "$1" "$2"; then
    return 0
  else
    return 1
  fi
}

add() {
  floattoint $1
  OGINPUT1="$1"
  OGINPUT2="$2"
  if [ $ISNEG == 1 ]; then
    INT0="${INT0:1}"
    jADDISNEG="1"
  else
    jADDISNEG="0"
  fi
  if [ -z $INT0 ]; then
    INT0="00"
  fi
  jADD0ORIG="$INT0"
  jADD0=$((10#$INT0))
  jADD1ORIG="${INT1:0:10}"
  jADD1="1${INT1:0:10}"
  floattoint $2
  if [ $ISNEG == 1 ]; then
    INT0="${INT0:1}"
    kADDISNEG="1"
  else
    kADDISNEG="0"
  fi
  if [ -z "$INT0" ]; then
    INT0="00"
  fi
  if ([ $kADDISNEG == 0 ] && [ $jADDISNEG == 1 ]) || ([ $kADDISNEG == 1 ] && [ $jADDISNEG == 0 ]); then
    ISSUB="1"
  else
    ISSUB="0"
  fi
  if [ $kADDISNEG == 1 ] && [ $jADDISNEG == 1 ]; then
    NEGADD="1"
  else
    NEGADD="0"
  fi
  if [ $INT0 != 0 ]; then
    kADD0=$((10#$INT0))
  else
    kADD0="$INT0"
  fi
  kADD0ORIG="$INT0"
  kADD1ORIG="${INT1:0:10}"
  kADD1="1${INT1:0:10}"
  mLENGTH="0"
  oLENGTH="0"
  pLENGTH="0"
  while read -n1 character; do
    oLENGTH=$((oLENGTH + 1))
  done < <(echo -n $jADD1)
  oLENGTH=$((oLENGTH - 1))
  while read -n1 character; do
    pLENGTH=$((pLENGTH + 1))
  done < <(echo -n $kADD1)
  pLENGTH=$((pLENGTH - 1))
  if [ $oLENGTH -gt $pLENGTH ]; then
    pADJ=$((oLENGTH - pLENGTH))
    COUNT="0"
    until [ $COUNT == $pADJ ]; do
      kADD1=""$kADD1"0"
      pLENGTH=$((pLENGTH + 1))
      COUNT=$((COUNT + 1))
    done
  fi
  if [ $pLENGTH -gt $oLENGTH ]; then
    oADJ=$((pLENGTH - oLENGTH))
    COUNT="0"
    until [ $COUNT == $oADJ ]; do
      jADD1=""$jADD1"0"
      oLENGTH=$((oLENGTH + 1))
      COUNT=$((COUNT + 1))
    done
  fi
  KEK="$jADD1"
  FKEKE="$kADD1"
  if [ $ISSUB == 1 ]; then
    dADD1=$((jADD1 - kADD1))
    SUBCARRY="0"
    if [ $dADD1 -lt 0 ]; then
      dADD1="${dADD1:1}"
      SUBCARRY="1"
    fi
  else
    dADD1=$((jADD1 + kADD1))
  fi
  while read -n1 character; do
    mLENGTH=$((mLENGTH + 1))
  done < <(echo -n $dADD1)
  if [ $ISSUB == 0 ]; then
    mLENGTH=$((mLENGTH - 1))
  fi
  COUNT="0"
  if [ $ISSUB == 0 ]; then
    REDUCE="2"
    until [ $COUNT == $mLENGTH ]; do
      REDUCE=""$REDUCE"0"
      COUNT=$((COUNT + 1))
    done
    dADD1=$((dADD1 - REDUCE))
  fi
  unset mmLENGTH
  while read -n1 character; do
    mmLENGTH=$((mmLENGTH + 1))
  done < <(echo -n $dADD1)
  mLENGTHTEST=$((mmLENGTH - mLENGTH))
  if [ $mLENGTHTEST == "1" ]; then
    mLENGTH=$((mLENGTH + 1))
  fi
  until [ $mmLENGTH == $mLENGTH ]; do
    dADD1="0"$dADD1""
    unset mmLENGTH
    while read -n1 character; do
      mmLENGTH=$((mmLENGTH + 1))
    done < <(echo -n $dADD1)
  done
  unset mLENGTH
  while read -n1 character; do
    mLENGTH=$((mLENGTH + 1))
  done < <(echo -n $dADD1)
  if [ $ISSUB == 0 ]; then
    if [ $mLENGTH -gt $oLENGTH ]; then
      CARRYING="1"
      GREATERBY=$((mLENGTH - oLENGTH))
    else
      CARRYING="0"
      GREATERBY="0"
    fi
  else
    if [ $mLENGTH -lt $oLENGTH ]; then
      until [ $mLENGTH -ge $oLENGTH ]; do
        if [ $mLENGTH -gt $oLENGTH ]; then
          mLENGTH="$oLENGTH"
        fi
        dADD1="0"$dADD1""
        mLENGTH=$((mLENGTH + 1))
      done
    fi
  fi
  if [ $mLENGTH -lt $oLENGTH ]; then
    until [ $mLENGTH == $oLENGTH ]; do
      dADD0="0"$dADD0""
      mLENGTH=$((mLENGTH + 1))
    done
  fi
  if [ $ISSUB == 0 ]; then
    dDECIM="${dADD1:$GREATERBY}"
  else
    dDECIM="$dADD1"
  fi
  if [ $ISSUB == 0 ]; then
    dADD0=$((jADD0 + kADD0))
    dADD0=$((dADD0 + CARRYING))
  else
    dADD0=$((jADD0 - kADD0))
    if [ $dADD0 -gt 0 ]; then
      dADD0=$((dADD0 - SUBCARRY))
    elif ([ $jADD1ORIG -lt $kADD1ORIG ]) && [ $SUBCARRY == 1 ]; then
      NEGADD="1"
    fi
    if [ $kADD0 -gt $jADD0 ] && [ $jADDISNEG == 1 ] && [ $kADDISNEG == 0 ]; then
      dADD0="${dADD0:1}"
    fi
  fi
  if ([ $ISSUB == 1 ] && [ $SUBCARRY == 1 ]); then
    unset SWITCHYLENGTH
    unset qLENGTH
    unset SWITCHED
    SWITCHY="0"
    SWITCHYLENGTH="1"
    while read -n1 character; do
      qLENGTH=$((qLENGTH + 1))
    done < <(echo -n $dDECIM)
    until [ $SWITCHYLENGTH == $qLENGTH ]; do
      SWITCHY=""$SWITCHY"0"
      unset SWITCHYLENGTH
      while read -n1 character; do
        SWITCHYLENGTH=$((SWITCHYLENGTH + 1))
      done < <(echo -n $SWITCHY)
    done
    SWITCHY="5"$SWITCHY""
    reverse() {
      unset REVERSE
      unset DEZEROLENGTH
      while read -n1 character; do
         DEZEROLENGTH=$((DEZEROLENGTH + 1))
      done < <(echo -n $DEZERO)
      i=$((DEZEROLENGTH - 1))
      while [ $i -ge 0 ]; do
        REVERSE="$REVERSE${DEZERO:$i:1}"
        i=$((i - 1))
      done
      DEZERO="$REVERSE"
    }
    DEZERO="$dDECIM"
    reverse
    remzeros "$DEZERO"
    DEZERO="$RETURN"
    reverse
    FIXYTHECLOWN="$DEZERO"
    SWITCHED=$((SWITCHY - FIXYTHECLOWN))
    if [ ! $NEGADD == 1 ]; then
      dDECIM="${SWITCHED:1}"
    else
      dDECIM="$dADD1"
    fi
  fi
  WHYTHEFUCK() {
    unset SWITCHYLENGTH
    unset qLENGTH
    unset SWITCHED
    SWITCHY="0"
    SWITCHYLENGTH="1"
    while read -n1 character; do
      qLENGTH=$((qLENGTH + 1))
    done < <(echo -n $dDECIM)
    until [ $SWITCHYLENGTH == $qLENGTH ]; do
      SWITCHY=""$SWITCHY"0"
      unset SWITCHYLENGTH
      while read -n1 character; do
        SWITCHYLENGTH=$((SWITCHYLENGTH + 1))
      done < <(echo -n $SWITCHY)
    done
    SWITCHY="5"$SWITCHY""
    reverse() {
    unset REVERSE
    unset DEZEROLENGTH
    while read -n1 character; do
      DEZEROLENGTH=$((DEZEROLENGTH + 1))
    done < <(echo -n $DEZERO)
    i=$((DEZEROLENGTH - 1))
    while [ $i -ge 0 ]; do
      REVERSE="$REVERSE${DEZERO:$i:1}"
      i=$((i - 1))
    done
    DEZERO="$REVERSE"
    }
    DEZERO="$dDECIM"
    reverse
    remzeros "$DEZERO"
    DEZERO="$RETURN"
    reverse
    FIXYTHECLOWN="$DEZERO"
    SWITCHED=$((SWITCHY - FIXYTHECLOWN))
    dDECIM="${SWITCHED:1}"
    dADD0=$((dADD0 - 1))
  }
  floattoint "$OGINPUT2"
  if [[ $jADD0ORIG -lt $kADD0ORIG ]] && [[ $KEK -gt $FKEKE ]] && [[ $ISSUB == 1 ]]; then
    WHYTHEFUCK
    if [[ $INT0 -lt 0 ]]; then
      dADD0=$((dADD0 + 2))
    fi
  fi
  if [[ $jADD0ORIG -lt $kADD0ORIG ]] && [ $ISSUB == 1 ] && [[ $KEK -lt $FKEKE ]]; then
    NEGADD="0"
  fi
  remzeros "$dDECIM"
  dADD=""$dADD0"."$RETURN""
  floattoint $dADD
  if [ $ISSUB == 1 ] && [ $NEGADD == 1 ] && [[ $INT0 -ge 0 ]]; then
    dADD="-"$dADD""
    FAACK="1"
  else
    FAACK="0"
  fi
  floattoint $dADD
  if [ $ISSUB == 1 ] && [ $FAACK == 0 ] && [[ $INT0 -ge 0 ]] && [ $jADDISNEG == 1 ] && [ $kADDISNEG == 0 ] && [[ $jADD0ORIG -ge $kADD0ORIG ]]; then
    dADD="-"$dADD""
  fi
  while read -n1 character; do
    vLENGTH=$((vLENGTH + 1))
  done < <(echo -n $dADD)
  if [ $INT0 == 0 ] && [ $INT1 == $INT0 ] && [ $ISSUB == 1 ] && [ $vLENGTH == 4 ]; then
    dADD="0.0"
  fi
  if [ $ISSUB == "1" ] && [ $jADDISNEG == 1 ]; then
    TESTAH="${INT0:1}"
    if [ -z "$TESTAH" ]; then
      TESTAH="0"
    fi
  else
    TESTAH="$INT0"
  fi
  if [ $ISSUB == "1" ] && [ $TESTAH == 0 ] && [ $jADDISNEG == 1 ] && [ $kADDISNEG="0" ] && [ $SUBCARRY == 1 ]; then
    if [ $INT0 == "00" ]; then
      dADD="0.$INT1"
    fi
  fi
  if [ $ISSUB == 0 ] && [ $jADDISNEG == 1 ] && [ $kADDISNEG == 1 ] && [[ $INT0 -gt 0 ]]; then
    dADD="-"$dADD""
  fi
  unset RETURN
  RETURN="$dADD"
}

sub() {
  floattoint $2
  if [ $ISNEG == 1 ]; then
    add "$1" "${2:1}"
  else
    add "$1" "-"$2""
  fi
}

mul() {
  unset RETURN
  OGFIRSTOP="$1"
  OGSECOP="$2"
  floattoint $1
  if [ $ISNEG == 1 ]; then
    mFIROPNEG="1"
    mjFIROP="${INT0:1}"
  else
    mFIROPNEG="0"
    mjFIROP="$INT0"
  fi
  mkFIROP="${INT1:0:10}"
  floattoint $2
  if [ $ISNEG == 1 ]; then
    mSECOPNEG="1"
    mjSECOP="${INT0:1}"
  else
    mSECOPNEG="0"
    mjSECOP="$INT0"
  fi
  mkSECOP="${INT1:0:10}"
  OG_mjFIROP="$mjFIROP"
  OG_mkFIROP="$mkFIROP"
  OG_mjSECOP="$mjSECOP"
  OG_mkSECOP="$mkSECOP"
  if (eql "0.$mkFIROP" 0 && gth "0.$mkSECOP" 0) || ([[ $mjFIROP -gt 0 ]] && [[ $mjSECOP -eq 0 ]]); then
    mul $OGSECOP $OGFIRSTOP
    return 0
  fi
  if eql "0.$mkFIROP" 0 && eql "0.$mkSECOP" 0 && eql $mjFIROP 0 && eql "0.$mkFIROP" 0; then
    RETURN="0.0"
    return 0
  fi
  INITCOUNT="0"
  INITTOTAL="0.0"
  until [[ $INITCOUNT -eq $mjFIROP ]]; do
    add $INITTOTAL ""$mjSECOP"."$mkSECOP""
    INITTOTAL="$RETURN"
    INITCOUNT=$((INITCOUNT + 1))
  done
  FIRSTSTAGE="$RETURN"
  if gth "0.$mkFIROP" 0; then
    SECCOUNT="0"
    SECTOTAL="0.0"
    until [[ $SECCOUNT -eq $mjSECOP ]]; do
      add $SECTOTAL "0."$mkFIROP""
      SECTOTAL="$RETURN"
      SECCOUNT=$((SECCOUNT + 1))
    done
    SECONDSTAGE="$RETURN"
    add $FIRSTSTAGE $SECONDSTAGE
    SECONDSTAGE="$RETURN"
  else
    SECONDSTAGE="$FIRSTSTAGE"
  fi
  if [[ $mkSECOP -gt 0 ]]; then
    mkFIROPLEN="0"
    mkSECOPLEN="0"
    while read -n1 character; do
      mkFIROPLEN=$((mkFIROPLEN + 1))
    done < <(echo -n $mkFIROP)
    while read -n1 character; do
      mkSECOPLEN=$((mkSECOPLEN + 1))
    done < <(echo -n $mkSECOP)
    TSTAGELEN=$((mkFIROPLEN + mkSECOPLEN))
    MCCOUNTY="0"
    THIRDSTAGE="0.0"
    WORKINGNUM="0"
    until [[ $MCCOUNTY -eq $mkFIROPLEN ]]; do
      WORKINGNUM="${mkFIROP:$MCCOUNTY:1}"
      mkSECOP="0"$mkSECOP""
      mkSECWORKING="0."$mkSECOP""
      if [[ ! $WORKINGNUM -eq 0 ]]; then
        KIMJONGCOUNT="0"
        until [[ $KIMJONGCOUNT -eq $WORKINGNUM ]]; do
          add $THIRDSTAGE $mkSECWORKING
          THIRDSTAGE="$RETURN"
          KIMJONGCOUNT=$((KIMJONGCOUNT + 1))
        done
      fi
      MCCOUNTY=$((MCCOUNTY + 1))
    done
    THIRDSTAGE="$RETURN"
    add $SECONDSTAGE $THIRDSTAGE
    THIRDSTAGE="$RETURN"
  else
    THIRDSTAGE="$SECONDSTAGE"
  fi
  if ([[ $mFIROPNEG -eq 1 ]] && [[ $mSECOPNEG -eq 0 ]]) || ([[ $mFIROPNEG -eq 0 ]] && [[ $mSECOPNEG -eq 1 ]]); then
    RETURN="-"$THIRDSTAGE""
    mFINNEG="1"
  else
    mFINNEG="0"
  fi
  if eql "0.$mkFIROP" 0 && gth "0.$mkSECOP" 0; then
    floattoint "$THIRDSTAGE"
    jFINRES=$((INT0 / 2))
    kFINRES=$((INT1 / 2))
    RETURN=""$jFINRES"."$kFINRES""
    if [ $mFINNEG == 1 ]; then
      RETURN="-"$RETURN""
    fi
  fi
}

div() {
  if eql "$2" 0; then
    RETURN="Error: Let's not break the universe, now"
    return 1
  fi
  OG_FIRSTOP="$1"
  OG_SECOP="$2"
  floattoint $1
  if [ $ISNEG == 1 ]; then
    dFIROPNEG="1"
    djFIROP="${INT0:1}"
  else
    dFIROPNEG="0"
    djFIROP="$INT0"
  fi
  dkFIROP="${INT1:0:10}"
  floattoint $2
  if [ $ISNEG == 1 ]; then
    dSECOPNEG="1"
    djSECOP="${INT0:1}"
  else
    dSECOPNEG="0"
    djSECOP="$INT0"
  fi
  dkSECOP="${INT1:0:10}"
  OG_dkSECOP="$dkSECOP"
  STOPPER="0"
  dWHOLE="0"
  FFIROP=""$djFIROP"."$dkFIROP""
  FSECOP=""$djSECOP"."$dkSECOP""
  if eql $FSECOP 0.0; then
    RETURN="Error: Let's not break the universe, now"
    return 1
  fi
  until [ $STOPPER == 1 ]; do
    if geq $FFIROP $FSECOP; then
      sub $FFIROP $FSECOP
      FFIROP="$RETURN"
      dWHOLE=$((dWHOLE + 1))
    else
      REMAINDER="$FFIROP"
      STOPPER="1"
    fi
  done
  unset DECIMATOR
  if ! eql $REMAINDER 0; then
    TERMINATRIX="0"
    until eql $REMAINDER 0; do
      mul $FSECOP 0.1
      FSECOP="$RETURN"
      if eql $FSECOP 0; then
        REMAINDER="0"
      fi
      if geq $REMAINDER $FSECOP; then
        STOPPER="0"
        ANOTHERCOUNT="0"
        until [ $STOPPER == 1 ]; do
          if geq $REMAINDER $FSECOP; then
            sub $REMAINDER $FSECOP
            REMAINDER="$RETURN"
            ANOTHERCOUNT=$((ANOTHERCOUNT + 1))
          else
            if [ -z "$DECIMATOR" ]; then
              DECIMATOR="$ANOTHERCOUNT"
            else
              DECIMATOR=""$DECIMATOR""$ANOTHERCOUNT""
            fi
            STOPPER="1"
          fi
        done
      else
        if [ -z "$DECIMATOR" ]; then
          DECIMATOR="0"
        else
          DECIMATOR=""$DECIMATOR"0"
        fi
      fi
      TERMINATRIX=$((TERMINATRIX + 1))
      if [[ $TERMINATRIX == 10 ]]; then
        REMAINDER="0"
      fi
    done
  fi
  if [ -z "$DECIMATOR" ]; then
    DECIMATOR="0"
  fi
  if ([[ $dFIROPNEG -eq 1 ]] && [[ $dSECOPNEG -eq 0 ]]) || ([[ $dFIROPNEG -eq 0 ]] && [[ $dSECOPNEG -eq 1 ]]); then
    RETURN="-"$dWHOLE"."$DECIMATOR""
  else
    RETURN=""$dWHOLE"."$DECIMATOR""
  fi
}

